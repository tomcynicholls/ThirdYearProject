package com.thirdyearproject.clientserver;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PublicKey;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

import javax.crypto.Cipher;

/*import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;

import de.flexiprovider.core.FlexiCoreProvider;

public class RSA {

public static void main(String[] args) throws Exception {


//Security.addProvider(new FlexiCoreProvider());

//KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", "FlexiCore");
//Cipher cipher = Cipher.getInstance("RSA", "FlexiCore");

KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
Cipher cipher = Cipher.getInstance("RSA");

kpg.initialize(1024);
KeyPair keyPair = kpg.generateKeyPair();
PrivateKey privKey = keyPair.getPrivate();
PublicKey pubKey = keyPair.getPublic();

System.out.println(System.currentTimeMillis());
cipher.init(Cipher.ENCRYPT_MODE, pubKey);

String cleartextFile = "cleartext.txt";
String ciphertextFile = "ciphertextRSA.txt";

FileInputStream fis = new FileInputStream(cleartextFile);
FileOutputStream fos = new FileOutputStream(ciphertextFile);
CipherOutputStream cos = new CipherOutputStream(fos, cipher);

byte[] block = new byte[32];
int i;
while ((i = fis.read(block)) != -1) {
cos.write(block, 0, i);
}

System.out.println(System.currentTimeMillis());
String cleartextAgainFile = "cleartextAgainRSA.txt";

cipher.init(Cipher.DECRYPT_MODE, privKey);
cos.close();

fis = new FileInputStream(ciphertextFile);
CipherInputStream cis = new CipherInputStream(fis, cipher);
fos = new FileOutputStream(cleartextAgainFile);

while ((i = cis.read(block)) != -1) {
fos.write(block, 0, i);
}
fos.close();
System.out.println(System.currentTimeMillis());
}

}*/
public class RSA {

public static void main(String[] args) throws Exception {
	

KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
kpg.initialize(2048);
KeyPair kp = kpg.genKeyPair();
Key publicKey = kp.getPublic();
Key privateKey = kp.getPrivate();

KeyFactory fact = KeyFactory.getInstance("RSA");
RSAPublicKeySpec pub = fact.getKeySpec(kp.getPublic(),
  RSAPublicKeySpec.class);
RSAPrivateKeySpec priv = fact.getKeySpec(kp.getPrivate(),
  RSAPrivateKeySpec.class);

saveToFile("public.key", pub.getModulus(),
  pub.getPublicExponent());
saveToFile("private.key", priv.getModulus(),
  priv.getPrivateExponent());

}

public static void saveToFile(String fileName,
		  BigInteger mod, BigInteger exp) throws IOException {
		  ObjectOutputStream oout = new ObjectOutputStream(
		    new BufferedOutputStream(new FileOutputStream(fileName)));
		  try {
		    oout.writeObject(mod);
		    oout.writeObject(exp);
		  } catch (Exception e) {
		    throw new IOException("Unexpected error", e);
		  } finally {
		    oout.close();
		  }
		}


PublicKey readKeyFromFile(String keyFileName) throws IOException {
	  InputStream in =
	    ServerConnection.class.getResourceAsStream(keyFileName);
	  ObjectInputStream oin =
	    new ObjectInputStream(new BufferedInputStream(in));
	  try {
	    BigInteger m = (BigInteger) oin.readObject();
	    BigInteger e = (BigInteger) oin.readObject();
	    RSAPublicKeySpec keySpec = new RSAPublicKeySpec(m, e);
	    KeyFactory fact = KeyFactory.getInstance("RSA");
	    PublicKey pubKey = fact.generatePublic(keySpec);
	    return pubKey;
	  } catch (Exception e) {
	    throw new RuntimeException("Spurious serialisation error", e);
	  } finally {
	    oin.close();
	  }
	}

public byte[] rsaEncrypt(byte[] data) {
	  PublicKey pubKey = readKeyFromFile("/public.key");
	  Cipher cipher = Cipher.getInstance("RSA");
	  cipher.init(Cipher.ENCRYPT_MODE, pubKey);
	  byte[] cipherData = cipher.doFinal(src);
	  return cipherData;
	}
}

