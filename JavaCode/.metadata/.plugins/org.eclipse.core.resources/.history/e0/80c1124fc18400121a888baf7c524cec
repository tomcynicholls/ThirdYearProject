package com.thirdyearproject.app;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.CipherOutputStream;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;
import de.flexiprovider.core.FlexiCoreProvider;

public class DisplayMessageActivity extends Activity {
	
	
    @SuppressLint("NewApi")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_display_message);

        // Make sure we're running on Honeycomb or higher to use ActionBar APIs
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
            // Show the Up button in the action bar.
            getActionBar().setDisplayHomeAsUpEnabled(true);
        }
        
        //ActionBar actionBar = getActionBar();
        //actionBar.hide();
        
     // Get the message from the intent
        Intent intent = getIntent();
        String message = intent.getStringExtra(AppActivity.EXTRA_MESSAGE);
        String mreceiver = intent.getStringExtra(AppActivity.EXTRA_RECEIVER);
        // Create the text view
        ((TextView)findViewById(R.id.show_message)).setText(message);
        ((TextView)findViewById(R.id.show_receiver)).setText(mreceiver);
        // Set the text view as the activity layout
       // setContentView(textView);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
        case android.R.id.home:
            NavUtils.navigateUpFromSameTask(this);
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    
    /** Called when the user clicks the Send button */
    public void returnButton(View view) {
    	//changed to return instead of show xml using below code
    	/*Intent intent = new Intent(this, ViewXmlWriter.class);
    	String message = ((TextView)findViewById(R.id.show_message)).getText().toString();
    	String mreceiver = ((TextView)findViewById(R.id.show_receiver)).getText().toString();
    	intent.putExtra(AppActivity.EXTRA_MESSAGE, message);
    	intent.putExtra(AppActivity.EXTRA_RECEIVER, mreceiver);
    	startActivity(intent);*/
    	
    	Intent intent = new Intent(this, AppActivity.class);
    	startActivity(intent);
    }
    
    public void RSA() throws Exception {
    	Security.addProvider(new FlexiCoreProvider());
    	Log.i("Current time: ", Long.toString(System.currentTimeMillis()));
    	KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA", "FlexiCore");
    	Cipher cipher = Cipher.getInstance("RSA", "FlexiCore");

    	kpg.initialize(1024);
    	KeyPair keyPair = kpg.generateKeyPair();
    	PrivateKey privKey = keyPair.getPrivate();
    	PublicKey pubKey = keyPair.getPublic();
    	Log.i("Current time: ", Long.toString(System.currentTimeMillis()));
    	//System.out.println(System.currentTimeMillis());
    	cipher.init(Cipher.ENCRYPT_MODE, pubKey);

    	String cleartextFile = AppActivity.fullpathwaystart + "typoutput.xml";
    	String ciphertextFile = AppActivity.fullpathwaystart +  "ciphertextRSA.xml";

    	FileInputStream fis = new FileInputStream(cleartextFile);
    	FileOutputStream fos = new FileOutputStream(ciphertextFile);
    	CipherOutputStream cos = new CipherOutputStream(fos, cipher);

    	byte[] block = new byte[32];
    	int i;
    	while ((i = fis.read(block)) != -1) {
    	cos.write(block, 0, i);
    	}
    	Log.i("Current time: ", Long.toString(System.currentTimeMillis()));
    	//System.out.println(System.currentTimeMillis());
    	String cleartextAgainFile = AppActivity.fullpathwaystart +  "cleartextAgainRSA.xml";

    	cipher.init(Cipher.DECRYPT_MODE, privKey);
    	cos.close();

    	fis = new FileInputStream(ciphertextFile);
    	CipherInputStream cis = new CipherInputStream(fis, cipher);
    	fos = new FileOutputStream(cleartextAgainFile);

    	while ((i = cis.read(block)) != -1) {
    	fos.write(block, 0, i);
    	}
    	fos.close();
    	Log.i("Current time: ", Long.toString(System.currentTimeMillis()));
    	
    }
    
    public void AES() {
    	
    }
    
}
