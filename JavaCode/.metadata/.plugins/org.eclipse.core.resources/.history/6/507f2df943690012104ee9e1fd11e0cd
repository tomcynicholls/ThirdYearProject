package com.thirdyearproject.app;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Date;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.View;
import android.widget.EditText;



public class AppActivity extends Activity {
    /** Called when the activity is first created. */
	public final static String EXTRA_MESSAGE = "com.thirdyearproject.app.MESSAGE";
	public final static String EXTRA_RECEIVER = "com.thirdyearproject.app.RECEIVER";
	//public ConnectionHandler conhandler = new ConnectionHandler();
	//stuff to do sockets in main 
	public static String serverip = "192.168.1.1";
	public static int serverport = 8003;
	Socket s;
	public int filesize=6022386; // filesize temporary hardcoded
	public int bytesRead;
	public int current = 0;
	public InputStream is;
	public OutputStream os;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        //conhandler.execute();
        
        String pathwaystart = this.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath();
        String fullpathwaystart = pathwaystart.concat("/");
        
        //create received file pathway
        String fromserver = "fromserver ";
      	Date fsdate = new Date();
      	String fssdate = fsdate.toString();
      	String fsrsdate = fssdate.replaceAll(":"," ");
      	String fromserverfilename = fromserver.concat(fsrsdate);
      	String fromserverfilepath = fromserverfilename.concat(".xml");
      	String fromserverpath = fullpathwaystart.concat(fromserverfilepath);
    	Log.i("from server path is: ",fromserverpath);
        
    	 try {
    	        Log.i("AsyncTank", "doInBackground: Creating Socket");
    	        s = new Socket(serverip, serverport);
    	    } catch (Exception e) {
    	        Log.i("AsyncTank", "doInBackground: Cannot create Socket");
    	    }
    	    if (s.isConnected()) {
    	        try {
    	        	is = s.getInputStream();
    	        	os = s.getOutputStream();
    	            Log.i("AsyncTank", "doInBackground: Socket created, Streams assigned");

    	        } catch (IOException e) {
    	            // TODO Auto-generated catch block
    	            Log.i("AsyncTank", "doInBackground: Cannot assign Streams, Socket not connected");
    	            e.printStackTrace();
    	        }
    	    } else {
    	        Log.i("AsyncTank", "doInBackground: Cannot assign Streams, Socket is closed");
    	    }
        
        //conhandler.readFromStream(fromserverpath);
    	    try {
    	        if (s.isConnected()) {
    	            Log.i("AsynkTask", "readFromStream : Reading message");
    	            
    	            byte [] mybytearray  = new byte [filesize];
    	            //InputStream is = s.getInputStream();
    	            FileOutputStream fos = new FileOutputStream(fromserverpath);
    	            BufferedOutputStream bos = new BufferedOutputStream(fos);
    	            bytesRead = is.read(mybytearray,0,mybytearray.length);
    	            current = bytesRead;

    	            bos.write(mybytearray, 0 , current);
    	            bos.flush();
    	            bos.close();
    	            
    	            
    	            
    	        } else {
    	            Log.i("AsynkTask", "readFromStream : Cannot Read, Socket is closed");
    	        }
    	    } catch (Exception e) {
    	        Log.i("AsynkTask", "readFromStream : Writing failed");
    	    }

        //get and display relevant data from received file
        XmlManipApp xmlmanip = new XmlManipApp();
        String returnedresult = xmlmanip.returnRequired(fromserverpath,"text");
        Log.i("message is: " , returnedresult);
        String returnedsender = xmlmanip.returnRequired(fromserverpath,"receiver");
        Log.i("from: " , returnedsender);
        
    }
    
    /** Called when the user clicks the Send button */
    public void sendMessage(View view) {
        // Do something in response to button
    	Intent intent = new Intent(this, DisplayMessageActivity.class);
    	EditText editText = (EditText) findViewById(R.id.edit_message);
    	EditText editTextReceiver = (EditText) findViewById(R.id.edit_receiver);
    	String message = editText.getText().toString();
    	String receiver = editTextReceiver.getText().toString();
    	
    	//create message xml file
        XmlWriterApp xmlwriter = new XmlWriterApp();
        
        //save file to send in format: toserver date and time
        String spathwaystart = this.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath();
        String sfullpathwaystart = spathwaystart.concat("/");
        
        String toserver = "toserver ";
      	Date date = new Date();
      	String sdate = date.toString();
      	String rsdate = sdate.replaceAll(":"," ");
      	String toserverfilename = toserver.concat(rsdate);
      	
      	String toserverfilepath = toserverfilename.concat(".xml");
      	String toserverpath = sfullpathwaystart.concat(toserverfilepath);
    	Log.i("to server path is: " , toserverpath);
        
        xmlwriter.WriteToFile(message,"app", receiver, toserverpath);
        
        //send file
        //conhandler.writeToStream(toserverpath);
        try {
            if (s.isConnected()){
                Log.i("AsynkTask", "writeToStream : Writing lat, lon");
                
                File myFile = new File (toserverpath);
                byte [] mybytearray2  = new byte [(int)myFile.length()];
                FileInputStream fis = new FileInputStream(myFile);
                BufferedInputStream bis = new BufferedInputStream(fis);
                bis.read(mybytearray2,0,mybytearray2.length);
                //OutputStream os = s.getOutputStream();
                System.out.println("Sending...");
                os.write(mybytearray2,0,mybytearray2.length);
                os.flush();
                s.close();
                
                
                
            } else {
                Log.i("AsynkTask", "writeToStream : Cannot write to stream, Socket is closed");
            }
        } catch (Exception e) {
            Log.i("AsynkTask", "writeToStream : Writing failed");
        }
        
    	intent.putExtra(EXTRA_MESSAGE, message);
    	intent.putExtra(EXTRA_RECEIVER, receiver);
    	startActivity(intent);
    }
    
}